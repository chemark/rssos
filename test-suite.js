#!/usr/bin/env node

/**
 * RSSOS ÂÖ®Èù¢ÊµãËØïÂ•ó‰ª∂
 * ÊµãËØï‰∏çÂêåÁ±ªÂûãÁΩëÁ´ôÁöÑRSSÁîüÊàêÂäüËÉΩ
 */

const fetch = require('node-fetch');
const SiteDetector = require('./src/utils/siteDetector');
const ContentParser = require('./src/parsers/contentParser');
const RSSGenerator = require('./src/utils/rssGenerator');
const CacheManager = require('./src/utils/cacheManager');

class TestSuite {
    constructor() {
        this.detector = new SiteDetector();
        this.generator = new RSSGenerator();
        this.cache = new CacheManager();
        this.results = {
            passed: 0,
            failed: 0,
            total: 0,
            details: []
        };
    }

    /**
     * ËøêË°åÊâÄÊúâÊµãËØï
     */
    async runAllTests() {
        console.log('üß™ RSSOS ÂÖ®Èù¢ÊµãËØïÂ•ó‰ª∂ÂêØÂä®\n');

        const testCategories = [
            { name: 'ÂçïÂÖÉÊµãËØï', tests: this.getUnitTests() },
            { name: 'ÁΩëÁ´ôÊ£ÄÊµãÊµãËØï', tests: this.getSiteDetectionTests() },
            { name: 'ÂÜÖÂÆπËß£ÊûêÊµãËØï', tests: this.getContentParsingTests() },
            { name: 'RSSÁîüÊàêÊµãËØï', tests: this.getRSSGenerationTests() },
            { name: 'ÁºìÂ≠òÁ≥ªÁªüÊµãËØï', tests: this.getCacheTests() },
            { name: 'ÂÆûÈôÖÁΩëÁ´ôÊµãËØï', tests: this.getRealSiteTests() }
        ];

        for (const category of testCategories) {
            console.log(`\nüìã ${category.name}`);
            console.log('='.repeat(50));

            for (const test of category.tests) {
                await this.runTest(test);
            }
        }

        this.printSummary();
    }

    /**
     * ËøêË°åÂçï‰∏™ÊµãËØï
     */
    async runTest(test) {
        this.results.total++;
        const startTime = Date.now();

        try {
            console.log(`  üîç ${test.name}...`);
            
            await test.fn();
            
            const duration = Date.now() - startTime;
            console.log(`  ‚úÖ ÈÄöËøá (${duration}ms)`);
            
            this.results.passed++;
            this.results.details.push({
                name: test.name,
                status: 'PASS',
                duration,
                category: test.category
            });
        } catch (error) {
            const duration = Date.now() - startTime;
            console.log(`  ‚ùå Â§±Ë¥•: ${error.message} (${duration}ms)`);
            
            this.results.failed++;
            this.results.details.push({
                name: test.name,
                status: 'FAIL',
                duration,
                error: error.message,
                category: test.category
            });
        }
    }

    /**
     * Ëé∑ÂèñÂçïÂÖÉÊµãËØï
     */
    getUnitTests() {
        return [
            {
                name: 'ÊµãËØïURLÈ™åËØÅ',
                category: 'unit',
                fn: async () => {
                    const validUrls = [
                        'https://example.com',
                        'http://test.org',
                        'https://sub.domain.com/path'
                    ];
                    
                    const invalidUrls = [
                        'not-a-url',
                        'ftp://example.com',
                        'javascript:alert(1)'
                    ];

                    validUrls.forEach(url => {
                        try {
                            new URL(url);
                        } catch (error) {
                            throw new Error(`ÊúâÊïàURLË¢´ÈîôËØØÊãíÁªù: ${url}`);
                        }
                    });

                    invalidUrls.forEach(url => {
                        try {
                            new URL(url);
                            if (!url.startsWith('http')) {
                                throw new Error(`Êó†ÊïàURLË¢´ÈîôËØØÊé•Âèó: ${url}`);
                            }
                        } catch (error) {
                            // ÊúüÊúõÁöÑÈîôËØØ
                        }
                    });
                }
            },
            {
                name: 'ÊµãËØïGUIDÁîüÊàê',
                category: 'unit',
                fn: async () => {
                    const siteInfo = { url: 'https://example.com', type: 'blog' };
                    const parser = new ContentParser(siteInfo);
                    
                    const guid1 = parser.generateGuid('test-article');
                    const guid2 = parser.generateGuid('test-article');
                    const guid3 = parser.generateGuid('different-article');
                    
                    if (guid1 !== guid2) {
                        throw new Error('Áõ∏ÂêåËæìÂÖ•Â∫îÁîüÊàêÁõ∏ÂêåGUID');
                    }
                    
                    if (guid1 === guid3) {
                        throw new Error('‰∏çÂêåËæìÂÖ•Â∫îÁîüÊàê‰∏çÂêåGUID');
                    }
                    
                    if (!guid1.startsWith('rssos-')) {
                        throw new Error('GUIDÂ∫îÊúâÊ≠£Á°ÆÁöÑÂâçÁºÄ');
                    }
                }
            },
            {
                name: 'ÊµãËØïÊëòË¶ÅÁîüÊàê',
                category: 'unit',
                fn: async () => {
                    const siteInfo = { url: 'https://example.com', type: 'blog' };
                    const parser = new ContentParser(siteInfo);
                    
                    const longText = 'A'.repeat(500);
                    const summary = parser.generateSummary(longText, 100);
                    
                    if (summary.length > 103) { // 100 + '...'
                        throw new Error('ÊëòË¶ÅÈïøÂ∫¶Ë∂ÖËøáÈôêÂà∂');
                    }
                    
                    if (!summary.endsWith('...')) {
                        throw new Error('ÈïøÊñáÊú¨ÊëòË¶ÅÂ∫î‰ª•...ÁªìÂ∞æ');
                    }
                    
                    const shortText = 'Short text';
                    const shortSummary = parser.generateSummary(shortText, 100);
                    
                    if (shortSummary !== shortText) {
                        throw new Error('Áü≠ÊñáÊú¨ÊëòË¶ÅÂ∫î‰øùÊåÅÂéüÊ†∑');
                    }
                }
            }
        ];
    }

    /**
     * Ëé∑ÂèñÁΩëÁ´ôÊ£ÄÊµãÊµãËØï
     */
    getSiteDetectionTests() {
        return [
            {
                name: 'Ê£ÄÊµãWordPressÂçöÂÆ¢',
                category: 'detection',
                fn: async () => {
                    const html = `
                        <html>
                            <head>
                                <meta name="generator" content="WordPress 6.0" />
                                <title>My Blog</title>
                            </head>
                            <body>
                                <article class="post">
                                    <h2 class="entry-title">Blog Post</h2>
                                    <div class="entry-content">Content here</div>
                                </article>
                            </body>
                        </html>
                    `;
                    
                    const result = await this.detector.detectSiteType(html, 'https://example-blog.com');
                    
                    if (result.type !== 'blog') {
                        throw new Error(`ÊúüÊúõÁ±ªÂûã‰∏∫blogÔºåÂÆûÈôÖ‰∏∫${result.type}`);
                    }
                    
                    if (result.platform !== 'wordpress') {
                        throw new Error(`ÊúüÊúõÂπ≥Âè∞‰∏∫wordpressÔºåÂÆûÈôÖ‰∏∫${result.platform}`);
                    }
                    
                    if (result.confidence < 30) {
                        throw new Error(`ÁΩÆ‰ø°Â∫¶Ëøá‰Ωé: ${result.confidence}%`);
                    }
                }
            },
            {
                name: 'Ê£ÄÊµã‰ΩúÂìÅÈõÜÁΩëÁ´ô',
                category: 'detection',
                fn: async () => {
                    const html = `
                        <html>
                            <head>
                                <meta name="description" content="Designer portfolio with creative work" />
                                <title>John Doe - Portfolio</title>
                            </head>
                            <body>
                                <div class="project">
                                    <h3>Project 1</h3>
                                    <div class="work-sample">Design work</div>
                                </div>
                            </body>
                        </html>
                    `;
                    
                    const result = await this.detector.detectSiteType(html, 'https://johndesigner.com');
                    
                    if (result.type !== 'portfolio') {
                        throw new Error(`ÊúüÊúõÁ±ªÂûã‰∏∫portfolioÔºåÂÆûÈôÖ‰∏∫${result.type}`);
                    }
                    
                    if (!result.features.includes('portfolio-keywords')) {
                        throw new Error('Â∫îÊ£ÄÊµãÂà∞portfolioÂÖ≥ÈîÆËØçÁâπÂæÅ');
                    }
                }
            },
            {
                name: 'Ê£ÄÊµãÊñ∞ÈóªÁΩëÁ´ô',
                category: 'detection',
                fn: async () => {
                    const html = `
                        <html>
                            <head>
                                <meta property="og:type" content="article" />
                                <script type="application/ld+json">
                                    {"@type": "NewsArticle", "headline": "Breaking News"}
                                </script>
                            </head>
                            <body>
                                <article>
                                    <h1>Breaking News Title</h1>
                                    <time datetime="2024-09-25">September 25, 2024</time>
                                    <p>News content here...</p>
                                </article>
                            </body>
                        </html>
                    `;
                    
                    const result = await this.detector.detectSiteType(html, 'https://news-site.com');
                    
                    if (result.type !== 'news') {
                        throw new Error(`ÊúüÊúõÁ±ªÂûã‰∏∫newsÔºåÂÆûÈôÖ‰∏∫${result.type}`);
                    }
                    
                    if (result.confidence < 50) {
                        throw new Error(`Êñ∞ÈóªÁΩëÁ´ôÁΩÆ‰ø°Â∫¶Â∫îËØ•ËæÉÈ´ò: ${result.confidence}%`);
                    }
                }
            }
        ];
    }

    /**
     * Ëé∑ÂèñÂÜÖÂÆπËß£ÊûêÊµãËØï
     */
    getContentParsingTests() {
        return [
            {
                name: 'Ëß£ÊûêÂçöÂÆ¢ÊñáÁ´†',
                category: 'parsing',
                fn: async () => {
                    const siteInfo = {
                        url: 'https://blog.example.com',
                        type: 'blog',
                        platform: 'wordpress',
                        selectors: {
                            articles: 'article',
                            title: '.entry-title',
                            content: '.entry-content',
                            link: 'a',
                            date: '.published'
                        }
                    };
                    
                    const html = `
                        <article>
                            <h2 class="entry-title"><a href="/post1">Test Article</a></h2>
                            <div class="entry-content">This is the article content.</div>
                            <time class="published" datetime="2024-09-25">September 25, 2024</time>
                        </article>
                    `;
                    
                    const parser = new ContentParser(siteInfo);
                    const articles = await parser.parseContent(html);
                    
                    if (articles.length === 0) {
                        throw new Error('Êú™Ëß£ÊûêÂà∞‰ªª‰ΩïÊñáÁ´†');
                    }
                    
                    const article = articles[0];
                    if (article.title !== 'Test Article') {
                        throw new Error(`Ê†áÈ¢òËß£ÊûêÈîôËØØ: ${article.title}`);
                    }
                    
                    if (!article.link.includes('/post1')) {
                        throw new Error(`ÈìæÊé•Ëß£ÊûêÈîôËØØ: ${article.link}`);
                    }
                    
                    if (!article.content.includes('article content')) {
                        throw new Error(`ÂÜÖÂÆπËß£ÊûêÈîôËØØ: ${article.content}`);
                    }
                }
            },
            {
                name: 'Ëß£Êûê‰ΩúÂìÅÈõÜÈ°πÁõÆ',
                category: 'parsing',
                fn: async () => {
                    const siteInfo = {
                        url: 'https://portfolio.example.com',
                        type: 'portfolio',
                        platform: 'portfolio',
                        selectors: {
                            articles: '.project',
                            title: '.project-title',
                            content: '.project-description',
                            link: 'a',
                            image: 'img'
                        }
                    };
                    
                    const html = `
                        <div class="project">
                            <h3 class="project-title">Design Project</h3>
                            <p class="project-description">A modern web design project</p>
                            <a href="/project/design">View Project</a>
                            <img src="/images/project.jpg" alt="Project Image" />
                        </div>
                    `;
                    
                    const parser = new ContentParser(siteInfo);
                    const articles = await parser.parseContent(html);
                    
                    if (articles.length === 0) {
                        throw new Error('Êú™Ëß£ÊûêÂà∞‰ªª‰ΩïÈ°πÁõÆ');
                    }
                    
                    const project = articles[0];
                    if (project.title !== 'Design Project') {
                        throw new Error(`È°πÁõÆÊ†áÈ¢òËß£ÊûêÈîôËØØ: ${project.title}`);
                    }
                    
                    if (!project.image) {
                        throw new Error('Êú™Ëß£ÊûêÂà∞È°πÁõÆÂõæÁâá');
                    }
                }
            }
        ];
    }

    /**
     * Ëé∑ÂèñRSSÁîüÊàêÊµãËØï
     */
    getRSSGenerationTests() {
        return [
            {
                name: 'ÁîüÊàêÂü∫Êú¨RSS XML',
                category: 'rss',
                fn: async () => {
                    const articles = [
                        {
                            title: 'Test Article',
                            link: 'https://example.com/test',
                            description: 'Test description',
                            content: '<p>Test content</p>',
                            pubDate: new Date().toUTCString(),
                            guid: 'test-123',
                            author: 'Test Author'
                        }
                    ];
                    
                    const siteInfo = {
                        url: 'https://example.com',
                        type: 'blog',
                        platform: 'test'
                    };
                    
                    const rssXML = this.generator.generateRSS(articles, siteInfo);
                    
                    if (!rssXML.includes('<?xml version="1.0"')) {
                        throw new Error('RSS XMLÁº∫Â∞ëXMLÂ£∞Êòé');
                    }
                    
                    if (!rssXML.includes('<rss version="2.0"')) {
                        throw new Error('RSS XMLÁº∫Â∞ëÁâàÊú¨‰ø°ÊÅØ');
                    }
                    
                    if (!rssXML.includes('<title><![CDATA[Test Article]]></title>')) {
                        throw new Error('RSS XMLÁº∫Â∞ëÊñáÁ´†Ê†áÈ¢ò');
                    }
                    
                    if (!rssXML.includes('https://example.com/test')) {
                        throw new Error('RSS XMLÁº∫Â∞ëÊñáÁ´†ÈìæÊé•');
                    }
                }
            },
            {
                name: 'È™åËØÅRSSÊ†ºÂºè',
                category: 'rss',
                fn: async () => {
                    const validRSS = `<?xml version="1.0" encoding="UTF-8"?>
                        <rss version="2.0">
                            <channel>
                                <title>Test</title>
                                <link>https://example.com</link>
                                <description>Test RSS</description>
                            </channel>
                        </rss>`;
                    
                    const invalidRSS = `<rss><channel><title>Broken`;
                    
                    if (!this.generator.validateRSS(validRSS)) {
                        throw new Error('ÊúâÊïàRSSË¢´ÈîôËØØÊãíÁªù');
                    }
                    
                    if (this.generator.validateRSS(invalidRSS)) {
                        throw new Error('Êó†ÊïàRSSË¢´ÈîôËØØÊé•Âèó');
                    }
                }
            },
            {
                name: 'ÁîüÊàêÁ©∫RSSÂ§ÑÁêÜ',
                category: 'rss',
                fn: async () => {
                    const siteInfo = {
                        url: 'https://example.com',
                        type: 'blog',
                        platform: 'test'
                    };
                    
                    const emptyRSS = this.generator.generateEmptyRSS('https://example.com', siteInfo);
                    
                    if (!emptyRSS.includes('<channel>')) {
                        throw new Error('Á©∫RSSÂ∫îÂåÖÂê´Âü∫Êú¨channelÁªìÊûÑ');
                    }
                    
                    if (emptyRSS.includes('<item>')) {
                        throw new Error('Á©∫RSS‰∏çÂ∫îÂåÖÂê´itemÂÖÉÁ¥†');
                    }
                }
            }
        ];
    }

    /**
     * Ëé∑ÂèñÁºìÂ≠òÊµãËØï
     */
    getCacheTests() {
        return [
            {
                name: 'ÁºìÂ≠òRSSÂÜÖÂÆπ',
                category: 'cache',
                fn: async () => {
                    const testUrl = 'https://test.com';
                    const testContent = '<rss><channel><title>Test</title></channel></rss>';
                    
                    // ÁºìÂ≠òÂÜÖÂÆπ
                    this.cache.cacheRSS(testUrl, testContent);
                    
                    // Ëé∑ÂèñÁºìÂ≠ò
                    const cached = this.cache.getCachedRSS(testUrl);
                    
                    if (!cached) {
                        throw new Error('ÁºìÂ≠òÂÜÖÂÆπÊú™ÊâæÂà∞');
                    }
                    
                    if (cached.content !== testContent) {
                        throw new Error('ÁºìÂ≠òÂÜÖÂÆπ‰∏çÂåπÈÖç');
                    }
                    
                    if (!cached.hit) {
                        throw new Error('ÁºìÂ≠òÂëΩ‰∏≠Ê†áËÆ∞ÈîôËØØ');
                    }
                }
            },
            {
                name: 'ÁºìÂ≠òËøáÊúüÂ§ÑÁêÜ',
                category: 'cache',
                fn: async () => {
                    const testUrl = 'https://test-expire.com';
                    
                    // Ê®°ÊãüËøáÊúüÊ£ÄÊü•
                    const shouldRefresh = this.cache.shouldRefreshCache(testUrl, 100); // 100ms
                    
                    if (!shouldRefresh) {
                        throw new Error('‰∏çÂ≠òÂú®ÁöÑÁºìÂ≠òÂ∫îÈúÄË¶ÅÂà∑Êñ∞');
                    }
                    
                    // Ê∑ªÂä†ÁºìÂ≠ò
                    this.cache.cacheRSS(testUrl, 'test');
                    
                    // Á´ãÂç≥Ê£ÄÊü•Ôºà‰∏çÂ∫îÈúÄË¶ÅÂà∑Êñ∞Ôºâ
                    const shouldNotRefresh = this.cache.shouldRefreshCache(testUrl, 60000); // 1ÂàÜÈíü
                    
                    if (shouldNotRefresh) {
                        throw new Error('Êñ∞ÁºìÂ≠ò‰∏çÂ∫îÈúÄË¶ÅÂà∑Êñ∞');
                    }
                }
            },
            {
                name: 'ÈîôËØØÁºìÂ≠òÂäüËÉΩ',
                category: 'cache',
                fn: async () => {
                    const testUrl = 'https://error-test.com';
                    const testError = new Error('Test error');
                    
                    // Ê∑ªÂä†Âà∞ÈîôËØØÁºìÂ≠ò
                    this.cache.addToErrorCache(testUrl, testError);
                    
                    // Ê£ÄÊü•ÈîôËØØÁºìÂ≠ò
                    const inErrorCache = this.cache.isInErrorCache(testUrl);
                    
                    if (!inErrorCache) {
                        throw new Error('ÈîôËØØÁºìÂ≠òÊú™ÁîüÊïà');
                    }
                    
                    // Ê∏ÖÁêÜÊµãËØï
                    this.cache.clearCache(testUrl);
                }
            }
        ];
    }

    /**
     * Ëé∑ÂèñÂÆûÈôÖÁΩëÁ´ôÊµãËØïÔºàÂèØÈÄâÔºåÈúÄË¶ÅÁΩëÁªúËøûÊé•Ôºâ
     */
    getRealSiteTests() {
        return [
            {
                name: 'ÊµãËØïÈòÆ‰∏ÄÂ≥∞ÂçöÂÆ¢Ëß£ÊûêÔºàÁΩëÁªúÔºâ',
                category: 'real-site',
                fn: async () => {
                    if (process.env.SKIP_NETWORK_TESTS === 'true') {
                        console.log('    ‚è≠Ô∏è  Ë∑≥ËøáÁΩëÁªúÊµãËØï');
                        return;
                    }
                    
                    try {
                        const url = 'https://www.ruanyifeng.com/blog/';
                        const response = await fetch(url, {
                            timeout: 10000,
                            headers: {
                                'User-Agent': 'Mozilla/5.0 (compatible; RSSOS/1.0)'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}`);
                        }
                        
                        const html = await response.text();
                        const siteInfo = await this.detector.detectSiteType(html, url);
                        
                        if (siteInfo.type !== 'blog') {
                            throw new Error(`ÊúüÊúõÊ£ÄÊµã‰∏∫ÂçöÂÆ¢ÔºåÂÆûÈôÖ‰∏∫${siteInfo.type}`);
                        }
                        
                        if (siteInfo.platform !== 'movable-type') {
                            throw new Error(`ÊúüÊúõÂπ≥Âè∞‰∏∫movable-typeÔºåÂÆûÈôÖ‰∏∫${siteInfo.platform}`);
                        }
                        
                        const parser = new ContentParser(siteInfo);
                        const articles = await parser.parseContent(html);
                        
                        if (articles.length === 0) {
                            throw new Error('Êú™Ëß£ÊûêÂà∞‰ªª‰ΩïÊñáÁ´†');
                        }
                        
                        console.log(`    üìä Ëß£ÊûêÂà∞ ${articles.length} ÁØáÊñáÁ´†`);
                        
                    } catch (error) {
                        if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
                            console.log('    ‚ö†Ô∏è  ÁΩëÁªúËøûÊé•ÈóÆÈ¢òÔºåË∑≥ËøáÊ≠§ÊµãËØï');
                            return;
                        }
                        throw error;
                    }
                }
            }
        ];
    }

    /**
     * ÊâìÂç∞ÊµãËØïÊÄªÁªì
     */
    printSummary() {
        console.log('\nüéØ ÊµãËØïÊÄªÁªì');
        console.log('='.repeat(50));
        console.log(`ÊÄªËÆ°ÊµãËØï: ${this.results.total}`);
        console.log(`‚úÖ ÈÄöËøá: ${this.results.passed}`);
        console.log(`‚ùå Â§±Ë¥•: ${this.results.failed}`);
        console.log(`üìä ÊàêÂäüÁéá: ${((this.results.passed / this.results.total) * 100).toFixed(1)}%`);

        if (this.results.failed > 0) {
            console.log('\n‚ùå Â§±Ë¥•ÁöÑÊµãËØï:');
            this.results.details
                .filter(test => test.status === 'FAIL')
                .forEach(test => {
                    console.log(`  ‚Ä¢ ${test.name}: ${test.error}`);
                });
        }

        // ÊÄßËÉΩÁªüËÆ°
        const totalTime = this.results.details.reduce((sum, test) => sum + test.duration, 0);
        console.log(`\n‚è±Ô∏è  ÊÄªËÄóÊó∂: ${totalTime}ms`);

        const avgTime = totalTime / this.results.total;
        console.log(`‚ö° Âπ≥ÂùáËÄóÊó∂: ${avgTime.toFixed(1)}ms`);

        // ÊåâÁ±ªÂà´ÁªüËÆ°
        console.log('\nüìã ÊåâÁ±ªÂà´ÁªüËÆ°:');
        const categories = {};
        this.results.details.forEach(test => {
            if (!categories[test.category]) {
                categories[test.category] = { total: 0, passed: 0 };
            }
            categories[test.category].total++;
            if (test.status === 'PASS') {
                categories[test.category].passed++;
            }
        });

        Object.entries(categories).forEach(([category, stats]) => {
            const rate = ((stats.passed / stats.total) * 100).toFixed(1);
            console.log(`  ${category}: ${stats.passed}/${stats.total} (${rate}%)`);
        });

        console.log('\n' + (this.results.failed === 0 ? 'üéâ ÊâÄÊúâÊµãËØïÈÄöËøáÔºÅ' : '‚ö†Ô∏è  Â≠òÂú®Â§±Ë¥•ÁöÑÊµãËØï'));
    }
}

// ËøêË°åÊµãËØïÂ•ó‰ª∂
if (require.main === module) {
    const testSuite = new TestSuite();
    
    testSuite.runAllTests().then(() => {
        process.exit(testSuite.results.failed === 0 ? 0 : 1);
    }).catch(error => {
        console.error('ÊµãËØïÂ•ó‰ª∂ËøêË°åÂá∫Èîô:', error);
        process.exit(1);
    });
}

module.exports = TestSuite;