const { URL } = require('url');

/**
 * RSS生成器
 * 将解析后的内容转换为标准RSS XML格式
 */
class RSSGenerator {
  constructor() {
    this.defaultConfig = {
      title: 'RSSOS Generated Feed',
      description: 'RSS feed generated by RSSOS - Universal RSS Generator',
      language: 'en-us',
      managingEditor: 'rssos@example.com',
      webMaster: 'rssos@example.com',
      category: 'General',
      ttl: 60, // 分钟
      generator: 'RSSOS Universal RSS Generator v1.0'
    };
  }

  /**
   * 生成RSS XML
   */
  generateRSS(articles, siteInfo, customConfig = {}) {
    const config = { ...this.defaultConfig, ...customConfig };
    const siteUrl = siteInfo.url;
    const siteTitle = this.extractSiteTitle(siteInfo) || config.title;
    const siteDescription = this.extractSiteDescription(siteInfo) || config.description;
    
    const rssUrl = this.getRSSUrl(siteUrl);
    const now = new Date().toUTCString();

    // 生成RSS items
    const rssItems = articles.map(article => this.generateRSSItem(article)).join('\n');

    // 生成完整RSS XML
    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[${siteTitle}]]></title>
    <link>${siteUrl}</link>
    <description><![CDATA[${siteDescription}]]></description>
    <language>${config.language}</language>
    <lastBuildDate>${now}</lastBuildDate>
    <managingEditor>${config.managingEditor}</managingEditor>
    <webMaster>${config.webMaster}</webMaster>
    <generator>${config.generator}</generator>
    <category>${this.getSiteCategory(siteInfo)}</category>
    <ttl>${config.ttl}</ttl>
    <atom:link href="${rssUrl}" rel="self" type="application/rss+xml"/>
    ${this.generateImageSection(siteInfo)}
    ${rssItems}
  </channel>
</rss>`;
  }

  /**
   * 生成单个RSS项目
   */
  generateRSSItem(article) {
    const {
      title,
      link,
      description,
      content,
      pubDate,
      guid,
      author,
      category,
      image
    } = article;

    // 处理完整内容
    let contentSection = '';
    if (content && content.length > (description?.length || 0)) {
      contentSection = `
      <content:encoded><![CDATA[${content}]]></content:encoded>`;
    }

    // 处理图片
    let enclosureSection = '';
    if (image && this.isValidImageUrl(image)) {
      enclosureSection = `
      <enclosure url="${image}" type="image/jpeg"/>`;
    }

    return `
    <item>
      <title><![CDATA[${title}]]></title>
      <link>${link}</link>
      <description><![CDATA[${description || title}]]></description>${contentSection}
      <pubDate>${pubDate}</pubDate>
      <guid isPermaLink="false">${guid}</guid>${author ? `
      <author>${author}</author>` : ''}${category ? `
      <category>${category}</category>` : ''}${enclosureSection}
    </item>`;
  }

  /**
   * 生成图片部分
   */
  generateImageSection(siteInfo) {
    const favicon = this.getFavicon(siteInfo);
    if (favicon) {
      return `
    <image>
      <url>${favicon}</url>
      <title><![CDATA[${this.extractSiteTitle(siteInfo)}]]></title>
      <link>${siteInfo.url}</link>
    </image>`;
    }
    return '';
  }

  /**
   * 提取网站标题
   */
  extractSiteTitle(siteInfo) {
    // 从网站信息中提取标题的逻辑
    const url = new URL(siteInfo.url);
    const domain = url.hostname.replace('www.', '');
    
    // 根据网站类型生成合适的标题
    switch (siteInfo.type) {
      case 'portfolio':
        return `${this.capitalize(domain.split('.')[0])} - Portfolio Updates`;
      case 'blog':
        return `${this.capitalize(domain.split('.')[0])} - Blog Posts`;
      case 'news':
        return `${this.capitalize(domain.split('.')[0])} - Latest News`;
      case 'ecommerce':
        return `${this.capitalize(domain.split('.')[0])} - Product Updates`;
      case 'repository':
        return `${this.capitalize(domain.split('.')[0])} - Repository Activity`;
      default:
        return `${this.capitalize(domain.split('.')[0])} - Site Updates`;
    }
  }

  /**
   * 提取网站描述
   */
  extractSiteDescription(siteInfo) {
    const url = new URL(siteInfo.url);
    const domain = url.hostname;
    
    // 根据网站类型生成合适的描述
    switch (siteInfo.type) {
      case 'portfolio':
        return `Latest portfolio projects and design work from ${domain}. Stay updated with new creative work and case studies.`;
      case 'blog':
        return `Latest blog posts and articles from ${domain}. Get notified about new content and updates.`;
      case 'news':
        return `Breaking news and latest stories from ${domain}. Stay informed with real-time updates.`;
      case 'ecommerce':
        return `New products and deals from ${domain}. Get notified about latest items and special offers.`;
      case 'repository':
        return `Latest commits, releases, and repository activity from ${domain}. Track development progress.`;
      default:
        return `Latest updates and content from ${domain}. Automatically generated RSS feed by RSSOS.`;
    }
  }

  /**
   * 获取网站分类
   */
  getSiteCategory(siteInfo) {
    switch (siteInfo.type) {
      case 'portfolio':
        return 'Design';
      case 'blog':
        return 'Blog';
      case 'news':
        return 'News';
      case 'ecommerce':
        return 'Shopping';
      case 'repository':
        return 'Technology';
      default:
        return 'General';
    }
  }

  /**
   * 获取网站图标
   */
  getFavicon(siteInfo) {
    const url = new URL(siteInfo.url);
    const baseUrl = url.origin;
    
    // 常见的favicon路径
    const faviconPaths = [
      '/favicon.ico',
      '/favicon.png',
      '/apple-touch-icon.png',
      '/android-chrome-192x192.png'
    ];
    
    // 返回第一个可能的favicon URL
    return `${baseUrl}/favicon.ico`;
  }

  /**
   * 生成RSS订阅URL
   */
  getRSSUrl(siteUrl) {
    // 如果是在Vercel部署，使用实际的RSS API URL
    if (process.env.VERCEL_URL) {
      return `https://${process.env.VERCEL_URL}/api/generate?url=${encodeURIComponent(siteUrl)}`;
    }
    
    // 本地开发环境
    return `http://localhost:3000/api/generate?url=${encodeURIComponent(siteUrl)}`;
  }

  /**
   * 验证图片URL
   */
  isValidImageUrl(url) {
    try {
      new URL(url);
      return /\.(jpg|jpeg|png|gif|webp|svg)$/i.test(url);
    } catch {
      return false;
    }
  }

  /**
   * 首字母大写
   */
  capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  /**
   * 验证RSS XML格式
   */
  validateRSS(rssXml) {
    try {
      // 基本XML结构验证
      if (!rssXml.includes('<?xml')) return false;
      if (!rssXml.includes('<rss')) return false;
      if (!rssXml.includes('<channel>')) return false;
      if (!rssXml.includes('<title>')) return false;
      if (!rssXml.includes('<link>')) return false;
      if (!rssXml.includes('<description>')) return false;
      
      return true;
    } catch (error) {
      console.error('RSS validation error:', error);
      return false;
    }
  }

  /**
   * 生成错误RSS
   */
  generateErrorRSS(error, siteUrl) {
    const now = new Date().toUTCString();
    const domain = new URL(siteUrl).hostname;
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>RSSOS Error - ${domain}</title>
    <link>${siteUrl}</link>
    <description>Error generating RSS feed for ${domain}</description>
    <lastBuildDate>${now}</lastBuildDate>
    <generator>RSSOS Universal RSS Generator v1.0</generator>
    
    <item>
      <title>RSS Generation Error</title>
      <link>${siteUrl}</link>
      <description><![CDATA[Unable to generate RSS feed: ${error.message}. Please check the URL and try again later.]]></description>
      <pubDate>${now}</pubDate>
      <guid isPermaLink="false">rssos-error-${Date.now()}</guid>
    </item>
  </channel>
</rss>`;
  }

  /**
   * 生成空RSS（当没有找到内容时）
   */
  generateEmptyRSS(siteUrl, siteInfo) {
    const now = new Date().toUTCString();
    const siteTitle = this.extractSiteTitle(siteInfo);
    const siteDescription = this.extractSiteDescription(siteInfo);
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title><![CDATA[${siteTitle}]]></title>
    <link>${siteUrl}</link>
    <description><![CDATA[${siteDescription} (No content found)]]></description>
    <lastBuildDate>${now}</lastBuildDate>
    <generator>RSSOS Universal RSS Generator v1.0</generator>
    
    <item>
      <title>No Content Found</title>
      <link>${siteUrl}</link>
      <description><![CDATA[No suitable content was found on this website for RSS generation. The site might not have parseable content or might require special handling.]]></description>
      <pubDate>${now}</pubDate>
      <guid isPermaLink="false">rssos-empty-${Date.now()}</guid>
    </item>
  </channel>
</rss>`;
  }
}

module.exports = RSSGenerator;